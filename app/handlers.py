from aiogram import Router, types
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
import app.keyboards as kb
from config import *
from database import *

my_router = Router()

@my_router.message(CommandStart())
async def cmd_start(message: Message):
    id_user = message.from_user.id
    add_user_to_db(user_id=id_user) # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–¥

    print(f'{message.from_user.username} | {message.from_user.id}: –ó–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞')

    if id_user in ADMIN_IDS:
        await message.answer_sticker(WELCOME_STICKER)
        await message.reply(f'<b>{WELCOME_CHAR} –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ... </b> \n \n'
                            f'<i>{DESCRIPT_CHAR} –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ...</i>',
                            parse_mode='HTML', reply_markup=kb.adm_keyboard)

    else:
        await message.answer_sticker(WELCOME_STICKER)
        await message.reply(f'<b>{WELCOME_CHAR} –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ... </b> \n \n'
                            f'<i>{DESCRIPT_CHAR} –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ...</i>',
                            parse_mode='HTML', reply_markup=kb.main)


# –ø—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞
@my_router.message(lambda msg: msg.text == '—Ç–µ–∫—Å—Ç')
async def snow_radar(message: types.Message):
    print(f'{message.from_user.username} | {message.from_user.id}: ...')
    await message.reply('...')

# –ø—Ä–∏–º–µ—Ä –∏–Ω–ª–∞–π–Ω
@my_router.callback_query(lambda cb: cb.data == 'inline')
async def close(query: CallbackQuery):
    await query.message.answer('...')


@my_router.message(lambda msg: msg.text == 'üë®‚Äçüíª–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')
async def admin_panel(message: Message):
    user_id = message.from_user.id
    if user_id in ADMIN_IDS:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç', reply_markup=kb.admin_panel)
    else:
        return


@my_router.callback_query(lambda cb: cb.data == 'close')
async def close(query: CallbackQuery):
    await query.message.delete()
