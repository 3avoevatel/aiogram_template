from aiogram.types import CallbackQuery
from database import *
from aiogram import Router, types

broadcast_text = ""
broadcast_photo = ""

adm_router = Router()

@adm_router.callback_query(lambda cb: cb.data == 'say_broadcast')
async def send_broadcast(callback_query: CallbackQuery):
    user_count = get_user_count()
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM users')
    users = cursor.fetchall()
    conn.close()

    for user in users:
        user_id = user[0]
        try:
            if broadcast_photo and broadcast_text:
                await callback_query.message.bot.send_photo(user_id, broadcast_photo, caption=broadcast_text)
            elif broadcast_text:
                await callback_query.message.bot.send_message(user_id, broadcast_text)
            elif broadcast_photo:
                await callback_query.message.bot.send_photo(user_id, broadcast_photo)
            else:
                await callback_query.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await callback_query.answer(f'üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º {user_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!')


user_bc_text = {}
user_bc_photo = {}


@adm_router.callback_query(lambda cb: cb.data == 'set_bc_text')
async def set_broadcast_text(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    user_bc_text[user_id] = True
    await callback_query.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")


@adm_router.callback_query(lambda cb: cb.data == 'set_bc_photo')
async def set_broadcast_photo(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    user_bc_photo[user_id] = True
    await callback_query.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")


@adm_router.message(lambda message: message.text and message.from_user.id in user_bc_text)
async def receive_broadcast_text(message: types.Message):
    global broadcast_text
    broadcast_text = message.text
    await message.reply("‚úÖ –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    del user_bc_text[message.from_user.id]


@adm_router.message(lambda message: message.photo and message.from_user.id in user_bc_photo)
async def receive_broadcast_photo(message: types.Message):
    global broadcast_photo
    broadcast_photo = message.photo[-1].file_id
    await message.reply("‚úÖ –§–æ—Ç–æ —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
    del user_bc_photo[message.from_user.id]


@adm_router.callback_query(lambda cb: cb.data == 'delete_bc_text')
async def delete_broadcast_text(callback_query: CallbackQuery):
    global broadcast_text
    broadcast_text = ""
    await callback_query.answer("‚úÖ –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —É–¥–∞–ª–µ–Ω!")

@adm_router.callback_query(lambda cb: cb.data == 'delete_bc_photo')
async def delete_broadcast_photo(callback_query: CallbackQuery):
    global broadcast_photo
    broadcast_photo = ""
    await callback_query.answer("‚úÖ –§–æ—Ç–æ —Ä–∞—Å—Å—ã–ª–∫–∏ —É–¥–∞–ª–µ–Ω–æ!")

@adm_router.callback_query(lambda cb: cb.data == 'get_users')
async def get_users_count(callback: CallbackQuery):
    user_count = get_user_count()
    await callback.message.answer(f'üìä –ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}')